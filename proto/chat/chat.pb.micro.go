// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: chat.proto

package chat

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/jdxj/study_im/proto/gate"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for C2C service

func NewC2CEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for C2C service

type C2CService interface {
	C2CMsg(ctx context.Context, in *C2CMsgR, opts ...client.CallOption) (*C2CMsgA, error)
	C2CAck(ctx context.Context, in *C2CAckR, opts ...client.CallOption) (*C2CAckA, error)
}

type c2CService struct {
	c    client.Client
	name string
}

func NewC2CService(name string, c client.Client) C2CService {
	return &c2CService{
		c:    c,
		name: name,
	}
}

func (c *c2CService) C2CMsg(ctx context.Context, in *C2CMsgR, opts ...client.CallOption) (*C2CMsgA, error) {
	req := c.c.NewRequest(c.name, "C2C.C2CMsg", in)
	out := new(C2CMsgA)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *c2CService) C2CAck(ctx context.Context, in *C2CAckR, opts ...client.CallOption) (*C2CAckA, error) {
	req := c.c.NewRequest(c.name, "C2C.C2CAck", in)
	out := new(C2CAckA)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for C2C service

type C2CHandler interface {
	C2CMsg(context.Context, *C2CMsgR, *C2CMsgA) error
	C2CAck(context.Context, *C2CAckR, *C2CAckA) error
}

func RegisterC2CHandler(s server.Server, hdlr C2CHandler, opts ...server.HandlerOption) error {
	type c2C interface {
		C2CMsg(ctx context.Context, in *C2CMsgR, out *C2CMsgA) error
		C2CAck(ctx context.Context, in *C2CAckR, out *C2CAckA) error
	}
	type C2C struct {
		c2C
	}
	h := &c2CHandler{hdlr}
	return s.Handle(s.NewHandler(&C2C{h}, opts...))
}

type c2CHandler struct {
	C2CHandler
}

func (h *c2CHandler) C2CMsg(ctx context.Context, in *C2CMsgR, out *C2CMsgA) error {
	return h.C2CHandler.C2CMsg(ctx, in, out)
}

func (h *c2CHandler) C2CAck(ctx context.Context, in *C2CAckR, out *C2CAckA) error {
	return h.C2CHandler.C2CAck(ctx, in, out)
}
